{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","playing","currentTrackIndex","duration","toggle_track","currentTrack","data","tracks","handleClick","bind","assertThisInitialized","playAudio","pauseAudio","selectTrackNumber","change_vol","setTrack","moveTrack","track_toggle","audioElement","play","pause","trackId","setState","volume","document","getElementById","value","x","currentTime","y","z","innerHTML","formatTime","title","click","time","min","Math","floor","sec","e","target","id","currentIndex","length","_this2","react_default","a","createElement","className","style","backgroundImage","album","App_Controls","onClick","ref","audio","src","onTimeUpdate","class","type","onChange","step","max","aria-label","App_TrackList","React","Component","Controls","TrackList","_this3","renderListItem","track","i","_this4","trackClass","key","cur","activeTrack","_this5","map","push","join","input","trackList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dc373160.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport data from \"./tracks.json\";\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      playing: false,\r\n      currentTrackIndex: 0,\r\n      duration: 0,\r\n      toggle_track: false,\r\n      currentTrack: data.tracks[0]\r\n\r\n\r\n    };\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.playAudio = this.playAudio.bind(this);\r\n    this.pauseAudio = this.pauseAudio.bind(this);\r\n    this.selectTrackNumber = this.selectTrackNumber.bind(this);\r\n    this.change_vol = this.change_vol.bind(this);\r\n    this.setTrack = this.setTrack.bind(this);\r\n    this.moveTrack = this.moveTrack.bind(this);\r\n    this.track_toggle = this.track_toggle.bind(this);\r\n\r\n\r\n\r\n\r\n  }\r\n  playAudio(){\r\n    this.audioElement.play();\r\n    \r\n  }\r\n  pauseAudio(){\r\n    this.audioElement.pause();\r\n  }\r\n  selectTrackNumber(trackId){\r\n    this.setState({currentTrackIndex:trackId,playing:true},this.playAudio);\r\n  }\r\n  change_vol(){\r\n    this.audioElement.volume = document.getElementById(\"change_vol\").value;\r\n  }\r\n\r\n  setTrack(){\r\n    var x = this.audioElement.currentTime;\r\n    var y = this.audioElement.duration;\r\n    var z = this.state.currentTrack;\r\n    this.setState({currentTrack: data.tracks[this.state.currentTrackIndex - 1]});\r\n    document.getElementById(\"current\").innerHTML = this.formatTime(x);\r\n    document.getElementById(\"progress\").value = x;\r\n    document.getElementById(\"cur_title\").innerHTML = z.title;\r\n\r\n\r\n    if(x > 0){\r\n      this.setState({duration : y});\r\n      document.getElementById(\"duration\").innerHTML = this.formatTime(y);\r\n    } \r\n    if(x === null) {\r\n      this.setState({duration : 0});\r\n      document.getElementById(\"duration\").innerHTML = \" \";\r\n    }\r\n    if(x === y){\r\n      document.getElementById(\"next\").click();\r\n    }\r\n  }\r\n\r\n  formatTime(time) {\r\n    var min = Math.floor(time / 60);\r\n    var sec = Math.floor(time % 60);\r\n    return min + ':' + ((sec<10) ? ('0' + sec) : sec);\r\n  }\r\n\r\n\r\n  moveTrack(){\r\n    this.audioElement.currentTime = document.getElementById('progress').value;\r\n  }\r\n\r\n  track_toggle() {\r\n    this.setState({toggle_track: !this.state.toggle_track});\r\n  }\r\n\r\n\r\n  handleClick(e) {\r\n    switch (e.target.id) {\r\n      case \"play\":\r\n        this.setState((state, props) => {\r\n          let currentTrackIndex = state.currentTrackIndex;\r\n          if (currentTrackIndex === 0) {\r\n            currentTrackIndex = 1;\r\n          }\r\n          return {\r\n            playing: true,\r\n            currentTrackIndex: currentTrackIndex,\r\n          };\r\n        },this.playAudio);\r\n        break;\r\n      case \"pause\":\r\n        this.setState({ playing: false },this.pauseAudio);\r\n        break;\r\n      case \"prev\":\r\n        this.setState((state, props) => {\r\n          let currentIndex = state.currentTrackIndex - 1;\r\n          if (currentIndex <= 0) {\r\n            return null;\r\n          } else {\r\n            return { playing:true,currentTrackIndex: currentIndex };\r\n          }\r\n        },this.playAudio);\r\n        break;\r\n      case \"next\":\r\n        this.setState((state, props) => {\r\n          let currentIndex = state.currentTrackIndex + 1;\r\n          if (currentIndex > data.tracks.length) {\r\n            return null;\r\n          } else {\r\n            return { playing:true,currentTrackIndex: currentIndex };\r\n          }\r\n        },this.playAudio);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    \r\n    return (\r\n      <div className=\"App\">\r\n\r\n        <div className=\"album\" style={{ backgroundImage: \"url(\" + this.state.currentTrack.album + \")\" }}></div>\r\n        <div className=\"player\"  >\r\n          <Controls onClick={this.handleClick} playing={this.state.playing} />\r\n\r\n          <audio id=\"audio\" ref={(audio)=>{this.audioElement = audio}} src={\"songs/\"+this.state.currentTrackIndex+\".mp3\"} onTimeUpdate={this.setTrack}/>\r\n          <div id=\"volume\">\r\n          <i class=\"fas fa-volume-down\"></i>\r\n          <input type=\"range\" id=\"change_vol\" onChange={this.change_vol} step=\"0.05\" min=\"0\" max=\"1\" aria-label=\"volume\" ></input>\r\n          </div>\r\n          <div className=\"track_set\">\r\n          <input type=\"range\" id=\"progress\" onChange={this.moveTrack} step=\"0.5\"  min=\"0\" max={this.state.duration} aria-label=\"progress\"/>\r\n          <div id =\"times\">\r\n          <p id=\"current\"></p>\r\n          <p id=\"duration\"></p>\r\n          </div>\r\n          <div className=\"info\">\r\n            <p id=\"cur_title\"></p>\r\n          </div>\r\n          </div>\r\n          <button className=\"Track_toggle ripple\" onClick={this.track_toggle} aria-label=\"playlist\"><i class=\"fas fa-music\" ></i></button>\r\n\r\n\r\n        </div>\r\n        <TrackList\r\n          currentTrackIndex={this.state.currentTrackIndex}\r\n          selectTrackNumber={this.selectTrackNumber}\r\n          toggle_track={this.state.toggle_track}\r\n        />\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// Controls\r\nclass Controls extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Controls\">\r\n        <i\r\n          id=\"prev\"\r\n          className=\"fa fa-fw fa-fast-backward\"\r\n          onClick={this.props.onClick}\r\n        />\r\n        {!this.props.playing &&\r\n          <i\r\n            id=\"play\"\r\n            onClick={this.props.onClick}\r\n            className=\"fa fa-fw fa-play\"\r\n          />}\r\n        {this.props.playing &&\r\n          <i\r\n            id=\"pause\"\r\n            onClick={this.props.onClick}\r\n            className=\"fa fa-fw fa-pause\"\r\n          />}\r\n        <i\r\n          id=\"next\"\r\n          className=\"fa fa-fw fa-fast-forward\"\r\n          onClick={this.props.onClick}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// TrackList\r\nclass TrackList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {tracks : []}\r\n    this.renderListItem = this.renderListItem.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    //fetch data for a track here (i.e. from Spotify or Soundcloud)s\r\n    this.setState({ tracks: data.tracks });\r\n  }\r\n  \r\n  renderListItem(track, i) {\r\n    let trackClass = this.props.currentTrackIndex === track.id\r\n      ? \"selected\"\r\n      : \"\";\r\n    return (\r\n      <li\r\n        key={track.id}\r\n        className={trackClass}\r\n        ref={cur => {\r\n          if (this.props.currentTrackIndex === track.id) {\r\n            this.activeTrack = cur;\r\n          }\r\n        }}\r\n        onClick={()=>{this.props.selectTrackNumber(track.id)}}\r\n      >\r\n        <div className=\"number\">{track.id}</div>\r\n        <div className=\"title\">{track.title}</div>\r\n        <div className=\"duration\">{track.duration}</div>\r\n      </li>\r\n    );\r\n  }\r\n  render() {\r\n    let tracks = this.state.tracks.map(this.renderListItem);\r\n    let track_toggle = [\"\"];\r\n    if(this.props.toggle_track === true) {\r\n      track_toggle.push('active');\r\n    }\r\n    return (\r\n      <ul\r\n        className={\"TrackList \" + [track_toggle.join(' ')]}\r\n        ref={input => {\r\n          this.trackList = input;\r\n        }}\r\n      >\r\n        {tracks}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}